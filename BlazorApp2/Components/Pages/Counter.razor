@page "/counter"
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<h1>Counterr</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<MyButton OnClick="IncrementCountAsync" class="btn btn-warning">Increment Count Async with Custom Component</MyButton>
@* <button class="btn btn-primary" @onclick="IncrementCountAsync">Click me</button> *@
@* <button class="btn btn-primary" @onclick="() => currentCount++">Click me</button> *@

<ol>
    @for (var i = 0; i < currentCount; i++)
    {
        <li>clicked</li>
    }
</ol>

<div class="mt-3">
    @* <input value="@text" @onchange="OnChange"/> *@
    @* <input @bind="text" /> <!--onchange--> *@
    <input @bind="text" @bind:event="oninput" @bind:after="Search"/> <!--oninput-->
    <button @onclick="OnClick">Clear</button>
    <p>@text</p>
    <p>@searchResult</p>
</div>

@code {
    string text = "";
    string searchResult = "";
    private void OnClick(MouseEventArgs e)
    {
        text = "";
    }

    async Task Search()
    {
        searchResult = "Searching...";
        await Task.Delay(2000);
        searchResult = $"Found {Random.Shared.Next()} Results!";
    }

    [Parameter]
    public int IncrementAmount { get; set; } = 1;
    private int currentCount = 0;
    private void IncrementCount(MouseEventArgs e)
    {
        currentCount += IncrementAmount;
    }
    async Task IncrementCountAsync(MouseEventArgs e)
    {
        await Task.Delay(1000);
        currentCount += IncrementAmount;
    }
}